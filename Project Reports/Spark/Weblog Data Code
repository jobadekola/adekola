{"cells":[{"cell_type":"markdown","source":["#Assignment task 2\n---\n####WEB LOG ANALYSIS <br />\n####SIT 742 - Modern Data Science - Tri 1 2017 <br />\n---\n OLUWATADE JOB ADEKOLA     Student_ID: 215383256 <br />\n SAOWALUK VONGWISEDSORAWUT Student_ID: 215013027"],"metadata":{}},{"cell_type":"code","source":["#To access to amazon S3\nACCESS_KEY = \"AKIAJBB5VNU5SBO6IFUQ\"\nSECRET_KEY = \"Hd2QxLY20gfoBhks8cFGjRc0mE53GiEKicPIVliz\"\nENCODED_SECRET_KEY = SECRET_KEY.replace(\"/\", \"%2F\")\nAWS_BUCKET_NAME = \"215013027sit742\"\nMOUNT_NAME = \"sit742_215013027\"  \ndbutils.fs.mount(\"s3a://%s:%s@%s\" % (ACCESS_KEY, ENCODED_SECRET_KEY, AWS_BUCKET_NAME), \"/mnt/%s\" % MOUNT_NAME)"],"metadata":{},"outputs":[],"execution_count":2},{"cell_type":"code","source":["display(dbutils.fs.ls(\"/mnt/sit742_215013027\"))"],"metadata":{},"outputs":[],"execution_count":3},{"cell_type":"code","source":["#Read log files and filter the commentation line from data\nlogFiles = sc.textFile(\"dbfs:/mnt/sit742_215013027/HTweblog.gz/\")\nlogFiles.cache()\ncomments = logFiles.filter(lambda line: line.startswith(\"#\"))\ndata_filtered = logFiles.filter(lambda line: not line.startswith(\"#\"))\nprint(data_filtered.take(5))"],"metadata":{},"outputs":[],"execution_count":4},{"cell_type":"code","source":["#Each attribute in the log files has separated by space(\" \"), so split data by \" \"\nData_splited = data_filtered.map(lambda l: l.split(\" \"))"],"metadata":{},"outputs":[],"execution_count":5},{"cell_type":"code","source":["#using generate_sections_of_url function to get the path and split them\nimport os.path, urlparse\ndef generate_sections_of_url(url):\n    path = urlparse.urlparse(url).path\n    sections = []; temp = \"\";\n    while path != '/':\n        temp = os.path.split(path)\n        path = temp[0]\n        sections.append(temp[1])\n    return sections"],"metadata":{},"outputs":[],"execution_count":6},{"cell_type":"code","source":["#Create data frame \"web_log\" and split each attribute \nfrom pyspark import Row\nfrom datetime import datetime\nweb_log = Data_splited.map(lambda p:Row(\n                         date_time=datetime.strptime(p[0]+\" \"+p[1],\"%Y-%m-%d %H:%M:%S\"),\n                         date = p[0],\n                         time = p[1],\n                         #s_ip = p[2], #\n                         #cs_method = p[3], #\n                         cs_uri_stem = p[4],\n                         #cs_uri_query = p[5],#\n                         #s_port = int(p[6]),#\n                         #cs_username = p[7],#\n                         cs_ip = p[8],\n                         cs_User_Agent = p[9],\n                         sc_status = int(p[10]),\n                         sc_substatus = int(p[11]),\n                         sc_win32_status = int(p[12]),\n                         time_taken = int(p[13]),\n                         session_id = p[0]+p[8]+p[9],\n                         path = generate_sections_of_url(p[4]))\n                         )"],"metadata":{},"outputs":[],"execution_count":7},{"cell_type":"code","source":["#create dataframe for sql\ndf = sqlContext.createDataFrame(web_log)\ndf.registerTempTable(\"log\")"],"metadata":{},"outputs":[],"execution_count":8},{"cell_type":"code","source":["df.printSchema()"],"metadata":{},"outputs":[],"execution_count":9},{"cell_type":"code","source":["%sql select session_id from log limit 10;"],"metadata":{},"outputs":[],"execution_count":10},{"cell_type":"code","source":["#using hash function to \nSQLTB_1 = sqlContext.sql(\"SELECT hash(session_id) as session_id,session_id as str_ssid,date,time,date_time,cs_ip,cs_User_Agent,cs_uri_stem,sc_status, time_taken,path[0] as page,sc_win32_status,sc_substatus FROM log \")\nSQLTB_1.show(10,False)\nSQLTB_1.registerTempTable(\"SQLTB_1\")"],"metadata":{},"outputs":[],"execution_count":11},{"cell_type":"code","source":["%sql select * from SQLTB_1 limit 20;"],"metadata":{},"outputs":[],"execution_count":12},{"cell_type":"code","source":["sqlContext.sql(\"select session_id,date,time,date_time,cs_ip,page,time_taken,sc_status from SQLTB_1  where page like '%.aspx%' \").show(20,False)"],"metadata":{},"outputs":[],"execution_count":13},{"cell_type":"code","source":["Page404 = sqlContext.sql(\"select session_id,date,time,date_time,cs_ip,page,cs_uri_stem,time_taken,sc_status from SQLTB_1  where page like '%404%' \")\nPage404.show(20,False)\nPage404.registerTempTable(\"Page404_tb\")"],"metadata":{},"outputs":[],"execution_count":14},{"cell_type":"code","source":["Page404.show(20,False)"],"metadata":{},"outputs":[],"execution_count":15},{"cell_type":"code","source":["sqlContext.sql(\"select session_id cs_ip,count(*) from Page404_tb  where page like '%404%' group by session_id,cs_ip order by count(*)desc \").show(20,False)"],"metadata":{},"outputs":[],"execution_count":16},{"cell_type":"code","source":["# Obtain location based on IP address\nimport urllib2\nfrom pyspark.sql import SQLContext, Row\nfrom pyspark.sql.types import *\n\n# Obtain the unique agents from the accesslog table\nipaddresses = sqlContext.sql(\"select distinct cs_ip from log where cs_ip is not null\").rdd\n\n# Convert None to Empty String\ndef xstr(s): \n  if s is None: \n    return '' \n  return str(s)\n\n# getCCA2: Obtains two letter country code based on IP address\ndef getCCA2(ip):\n  # Obtain CCA2 code from FreeGeoIP\n  url = 'http://freegeoip.net/csv/' + ip\n  str = urllib2.urlopen(url).read()\n  cca2 = str.split(\",\")[1]\n  \n  # return\n  return cca2\n\n# Loop through distinct IP addresses and obtain two-letter country codes\nmappedIPs = ipaddresses.map(lambda x: (x[0], getCCA2(x[0])))\n\n# mappedIP2: contains the IP address and CCA2 codes\n# The schema is encoded in a string.\nschemaString = \"ip cca2\"\nfields = [StructField(field_name, StringType(), True) for field_name in schemaString.split()]\nschema = StructType(fields)\n\n# Create DataFrame with schema\nmappedIP2 = sqlContext.createDataFrame(mappedIPs, schema)\n\n#Country code file\n#/FileStore/tables/0ujwe32h1495712672115/iso_countrycodes.csv\n# Obtain the Country Codes \nfields = sc.textFile(\"/FileStore/tables/0ujwe32h1495712672115/iso_countrycodes.csv\").map(lambda l: l.split(\",\"))\ncountrycodes = fields.map(lambda x: Row(cn=x[0], cca2=x[1], cca3=x[2]))\n\n# Country Codes DataFrame:\n#   Create DataFrame (inferring schema using reflection)\ncountryCodesDF = sqlContext.createDataFrame(countrycodes)\n\n# Join countrycodes with mappedIPsDF so we can have IP address and three-letter ISO country codes\nmappedIP3 = mappedIP2 \\\n  .join(countryCodesDF, mappedIP2.cca2 == countryCodesDF.cca2, \"left_outer\") \\\n  .select(mappedIP2.ip, mappedIP2.cca2, countryCodesDF.cca3, countryCodesDF.cn)\n  \n# Register the mapping table\nmappedIP3.registerTempTable(\"mappedIP3\")"],"metadata":{},"outputs":[],"execution_count":17},{"cell_type":"code","source":["iperror =sqlContext.sql(\"select session_id,cs_ip,count(*) as page_count from Page404_tb group by session_id, cs_ip order by count(*) desc\")\niperror.show(5,False)\niperror.registerTempTable(\"iperror\")"],"metadata":{},"outputs":[],"execution_count":18},{"cell_type":"code","source":["%sql select cca3, page_count from mappedIP3 a, iperror b where a.ip= b.cs_ip GROUP BY cca3,page_count ;"],"metadata":{},"outputs":[],"execution_count":19},{"cell_type":"code","source":["sqlContext.sql(\"select session_id,date_time,cs_ip, page,time_taken from SQLTB_1 where  session_id='-1442062705' order by time \").show(20,False)"],"metadata":{},"outputs":[],"execution_count":20},{"cell_type":"code","source":["hits = sqlContext.sql(\"select session_id,cs_ip,count(*) as user_access_count from SQLTB_1 group by session_id, cs_ip order by user_access_count desc \")\nhits.show(20,False)\nhits.registerTempTable(\"user_access_count\")"],"metadata":{},"outputs":[],"execution_count":21},{"cell_type":"code","source":["%sql select cca3, user_access_count from mappedIP3 a, user_access_count b where a.ip= b.cs_ip GROUP BY cca3,user_access_count  ;"],"metadata":{},"outputs":[],"execution_count":22},{"cell_type":"code","source":["sequencePath = sqlContext.sql(\" select  session_id,time,page,time_taken,sc_status,\\\n                        ROW_NUMBER() OVER (ORDER BY session_id,time) AS Sequence from ( \\\n                        SELECT  a.session_id,time, page,time_taken,sc_status, \\\n                        LAG(page) OVER (ORDER BY session_id,time) lead_web_page \\\n                        FROM SQLTB_1 a where cs_user_agent <>'-' \\\n                               and page like '%.aspx%'and page<>'404.aspx' and str_ssid not like '%.com%' \\\n                               and session_id = '1872063208' order by time)\")\nsequencePath.show(20,False)"],"metadata":{},"outputs":[],"execution_count":23},{"cell_type":"code","source":["sqlContext.sql(\"select page,count(*) as Visits from SQLTB_1 where page like '%room%' AND page like '%.aspx%' group by page order by Visits desc\").show(20,False)"],"metadata":{},"outputs":[],"execution_count":24},{"cell_type":"code","source":["SQLTB_1.count()"],"metadata":{},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":["Analysis part\n---"],"metadata":{}},{"cell_type":"code","source":["sqlTB_3 = sqlContext.sql(\" select distinct session_id,page from ( \\\n                               SELECT  hash(session_id) as session_id,date,time,date_time,page,time_taken,sc_status,sc_substatus\\\n                               FROM SQLTB_1  \\\n                                     where cs_user_agent <>'-' \\\n                                     and page like '%.aspx%' \\\n                                     and page<>'404.aspx' \\\n                                     and session_id not like '%.com%' ) order by session_id\\\n                                     \")"],"metadata":{},"outputs":[],"execution_count":27},{"cell_type":"code","source":["data_reduceByKey = (sqlTB_3.rdd.map(lambda a: (a.session_id, a.page +' ',))\n    .reduceByKey(lambda a , b: a + b)\n.collect())"],"metadata":{},"outputs":[],"execution_count":28},{"cell_type":"code","source":["session_id_data, webpage = map(list,zip(*data_reduceByKey))"],"metadata":{},"outputs":[],"execution_count":29},{"cell_type":"code","source":["from pyspark.mllib.fpm import FPGrowth\ndata = sc.parallelize(webpage)\nweb_page_visits = data.map(lambda line: line.strip().split(' '))\nmodel = FPGrowth.train(web_page_visits, minSupport=0.02, numPartitions=10)\nresult = model.freqItemsets().collect()\nfor fi in result:\n   print(fi)\n"],"metadata":{},"outputs":[],"execution_count":30},{"cell_type":"code","source":["page_dining = sqlContext.sql(\"select session_id,date,time,date_time,cs_ip,page,cs_uri_stem,time_taken,sc_status from SQLTB_1  where page like '%dining%' and page like '%.aspx' \")\npage_dining.registerTempTable(\"page_dining\")\n\npage_dining.show(20,False)"],"metadata":{},"outputs":[],"execution_count":31},{"cell_type":"code","source":["page_dining_count =sqlContext.sql(\"select session_id,cs_ip,count(*) as page_dining_count from page_dining group by session_id, cs_ip order by count(*) desc\")\npage_dining_count.show(20,False)\npage_dining_count.registerTempTable(\"page_dining_count\")"],"metadata":{},"outputs":[],"execution_count":32},{"cell_type":"code","source":["%sql select cca3, page_dining_count from mappedIP3 a, page_dining_count b where a.ip= b.cs_ip GROUP BY cca3,page_dining_count ;"],"metadata":{},"outputs":[],"execution_count":33},{"cell_type":"code","source":["sqlContext.sql(\"select session_id,time,date_time,cs_ip, page,time_taken from SQLTB_1 where session_id='15787048' and page like '%.aspx%' AND session_id not like '%.com%' AND page<>'404.aspx' order by date_time \").show(20,False)"],"metadata":{},"outputs":[],"execution_count":34},{"cell_type":"code","source":["sqlContext.sql(\"select session_id, date,time,date_time,cs_ip, page,time_taken from SQLTB_1 where session_id='-1442062705' and page like '%.aspx%' \").show(20,False)"],"metadata":{},"outputs":[],"execution_count":35},{"cell_type":"code","source":["%sql select session_id, page from SQLTB_1 where page like \"%.aspx%\" limit 10;"],"metadata":{},"outputs":[],"execution_count":36},{"cell_type":"code","source":["%sql select session_id, page from SQLTB_1 where page like '%.aspx%' and session_id not like '%.com%' and page <>'404.aspx' limit 10;"],"metadata":{},"outputs":[],"execution_count":37},{"cell_type":"code","source":["%sql select session_id, page,sc_status from SQLTB_1 WHERE  page like \"%.aspx%\"and sc_status=\"404\" limit 10;"],"metadata":{},"outputs":[],"execution_count":38},{"cell_type":"code","source":["sqlContext.sql(\"SELECT session_id, path[0],sc_status FROM log WHERE  path[0] like '%.aspx%' and sc_status='404'\").show(10,False)"],"metadata":{},"outputs":[],"execution_count":39},{"cell_type":"code","source":["%sql select session_id, cs_ip from log  WHERE  path[0] like \"%.aspx%\"limit 10;"],"metadata":{},"outputs":[],"execution_count":40},{"cell_type":"code","source":["%sql select session_id, cs_ip, time_taken from log WHERE  path[0] like \"%.aspx%\" limit 10;"],"metadata":{},"outputs":[],"execution_count":41},{"cell_type":"code","source":["%sql select session_id, cs_ip,cs_uri_stem, time_taken from log  WHERE  path[0] like \"%.aspx%\" order by time_taken DESC limit 10;"],"metadata":{},"outputs":[],"execution_count":42},{"cell_type":"code","source":["%sql select cs_uri_stem as Url,COUNT(*) As Hits from log GROUP BY cs_uri_stem  order by Hits  DESC limit 10;"],"metadata":{},"outputs":[],"execution_count":43},{"cell_type":"code","source":["%sql select * from mappedIP3 limit 20;"],"metadata":{},"outputs":[],"execution_count":44},{"cell_type":"code","source":["%sql select cca3, count(distinct ip) as users from mappedIP3 group by cca3"],"metadata":{},"outputs":[],"execution_count":45}],"metadata":{"name":"Assienment_2","notebookId":1213212116292211},"nbformat":4,"nbformat_minor":0}
